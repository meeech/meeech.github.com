<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: simpletip | bits and bobs]]></title>
  <link href="http://meeech.github.io/blog/categories/simpletip/atom.xml" rel="self"/>
  <link href="http://meeech.github.io/"/>
  <updated>2013-05-01T12:48:53-04:00</updated>
  <id>http://meeech.github.io/</id>
  <author>
    <name><![CDATA[Mitchell Amihod]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metafield tip: don't bother with Modify when updating Products]]></title>
    <link href="http://meeech.github.io/metafield-tip-dont-bother-with-modify-when-up/"/>
    <updated>2011-10-14T00:00:00-04:00</updated>
    <id>http://meeech.github.io/metafield-tip-dont-bother-with-modify-when-up</id>
    <content type="html"><![CDATA[<p>Been spending some time looking into <a href="http://api.shopify.com/metafield.html">metafields</a>.</p>


<p>Here&rsquo;s something worth knowing to make your life easier.</p>


<p>When updating metafields on a product, turns out <a href="http://api.shopify.com/metafield.html#create">Create</a> acts like Modify or Create if it doesn&rsquo;t exist. As long as the namespace and key match an existing metafield on the product, the value will be updated, otherwise it will be created.</p>


<p>If you know of a good case when to use the Modify call, I&rsquo;d love to hear it.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[use && to chain shell commands together]]></title>
    <link href="http://meeech.github.io/use-to-chain-shell-commands-together/"/>
    <updated>2010-09-29T00:00:00-04:00</updated>
    <id>http://meeech.github.io/use-to-chain-shell-commands-together</id>
    <content type="html"><![CDATA[<p>I bounce between 2 versions of <a href="http://cakephp.org">cakephp</a> - some projects are still on 1.2.&nbsp;</p>


<p>I use a git checkout of the project. Sick of always having to cd ~/Sites/cake and then git co cakephp1.X, even with completion.</p>


<p>Simple solution.&nbsp;In most shells, you can chain commands together using &amp;&amp;, so it's simple enough to make an alias to combine the commands. takes 1 min. You can apply this to all sorts of everyday tasks.</p>


<p>So, open your .bashrc (or wherever you prefer to put your shell aliases) and add (for example)</p>


<div class="CodeRay">
  <div class="code"><pre>alias cake12='cd ~/Sites/cake &amp;&amp; git co cakephp1.2 &amp;&amp; cd -'
alias cake13='cd ~/Sites/cake &amp;&amp; git co cakephp1.3 &amp;&amp; cd -'</pre></div>
</div>




<p>Breaking this example down: switch to cakephp directory, checkout version X, and the cd - takes us back to the previous directory.&nbsp;</p>

]]></content>
  </entry>
  
</feed>
