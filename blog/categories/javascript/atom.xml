<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | bits and bobs]]></title>
  <link href="http://meeech.amihod.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://meeech.amihod.com/"/>
  <updated>2013-06-20T12:10:11-04:00</updated>
  <id>http://meeech.amihod.com/</id>
  <author>
    <name><![CDATA[Mitchell Amihod]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Emitter for Events with Titanium]]></title>
    <link href="http://meeech.amihod.com/using-event-emitter-with-titanium/"/>
    <updated>2013-06-20T08:32:00-04:00</updated>
    <id>http://meeech.amihod.com/using-event-emitter-with-titanium</id>
    <content type="html"><![CDATA[<p>While building <a href="http://www.nirvanahq.com">Nirvana</a>'s iPad app I revisited some of the decisions made working on the iPhone version. This time around, decided to go with a more event-driven design.</p>

<p>Titanium has a global event system, so on the surface that would seem like a good choice. Just use Ti.App.fireEvent/addEventListener and you're good to go.</p>

<p>There are a couple of things I wasn't happy with using Ti events:</p>

<ul>
<li>There seems to be some overhead associated with using Ti event system. Any data you pass has to cross the Kroll-bridge.</li>
<li>You can only pass "<a href="http://docs.appcelerator.com/titanium/latest/#!/guide/Event_Handling">JSON-serializable data when firing events</a>". So this means no passing around Ti objects when firing events manually.</li>
<li>You always need to pass in a callback object for removeEventListener. You can't just remove all events for a type.</li>
</ul>


<p>I decided to give <a href="https://github.com/component/emitter">Emitter</a> a try, from the <a href="https://github.com/component">Component</a> library. It's fairly straight-forward to use.</p>

<p>I whipped up a little example <a href="https://gist.github.com/meeech/568669ea435afe246a11">test script</a> to compare use of Emitter vs Ti events. Speed wise, Emitter runs the 10000 events faster than the Ti events.</p>

<p>With any choice there are advantages and disadvantages.</p>

<ul>
<li>In the <a href="https://gist.github.com/meeech/568669ea435afe246a11">example code</a>, if you up limit, ie: 100000, there's a good chance, you'll blow the stack - so that's something to be aware of. You can wrap the event.emit in a setTimeout(f, 0). In that case, the performance is on par with Ti's event system.</li>
<li>One advantage of using Emitter is you can actually pass around Ti objects and functions. Since we're not going over the bridge, you can pass pretty much anything, as opposed to only <a href="http://docs.appcelerator.com/titanium/latest/#!/guide/Event_Handling">serializable data</a>. This makes it more straight-forward to decouple the pieces of your app.<br/>
<strong>eg</strong>: I use a popover, which is shown from a main controller. You can then dive further into the details, and make edits. Rather than keep track of the popover on a global and use it directly when needing to add/remove a view from different areas, the popover just listens for 'popover:add' &amp; 'popover:remove' events to add/remove views. And the TiView itself is passed around as part of the event data. No global juggling involved to get a reference to those views.</li>
<li>The callbacks are executed immediately. That can be a benefit or a drawback, depending on how you use it. I've found it helpful to be assured of some events happening in sequence, especially when dealing with timing &amp; redraws in Titanium.</li>
</ul>


<p>Something wrong? Something right? Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with Javascript Debugger in Chrome]]></title>
    <link href="http://meeech.amihod.com/getting-started-with-javascript-debugging-in-chrome/"/>
    <updated>2013-05-15T00:00:00-04:00</updated>
    <id>http://meeech.amihod.com/getting-started-with-javascript-debugging-in-chrome</id>
    <content type="html"><![CDATA[<p>When getting started with js, one of the first debugging techniques you learn is <code>console.log</code> to see what's going on. For a variety of reasons, this behaviour sticks. It's time to level up my friends! There is a better way - the Chrome Javascript debugger.</p>

<p>Here is a gentle introduction to the js debugger, and an example of some neat things you can do with it.</p>

<p>Based on a true story, but I've simplified things in this case :)</p>

<p>Below is the script we will be debugging. The problem in this case is clear (the extra <code>\n</code> in <code>value</code>). We'll go through the steps you would use to find this problem with the debugger. You can load this script and follow along: <a href="http://meeech.amihod.com/debug.html">http://meeech.amihod.com/debug.html</a>.</p>

<p>``` js
//Pretend this value returned from a remote source
var value = "hang\n";</p>

<p>setInterval(function(){</p>

<pre><code>switch(value) {
  case 'hang':
    document.body.innerHTML = "Hang in there!";
    break;
  case 'up':
    document.body.innerHTML = "Up";
    break;
  default:
    document.body.innerHTML = "No good!";
}
</code></pre>

<p>},1000);
```</p>

<p><img class="right" src="/images/chrome_debugger/remote-source.png" width="353" height="142" title="Remote Source" > Pretend <code>value</code> is actually coming from a remote source. You inspect the response and don't notice the carriage return.</p>

<p>We're expecting that our script will show "Hang in there!", but instead, we keep seeing "No good!".</p>

<ul>
<li>Open your Developer Tools (<em>View > Developer > Developer Tools</em>)</li>
<li>Click on the Source tab. Here is where you can find all the scripts running on a page. [The sidebar might not be showing- make it show by clicking on the arrow]. Select the debug.html page. <img class="center" src="/images/chrome_debugger/showing-the-source.png" width="365" height="214" title="Show Source" ></li>
<li>You should now see something like this: <img class="center" src="/images/chrome_debugger/debug-panel.png" width="1021" height="330"></li>
<li>First thing we want to do is see what the <code>switch</code> statement thinks its <code>value</code> is. Let's go ahead, and add a breakpoint. To add a breakpoint, click on the line number - in this case, line 6. The blue mark is showing a breakpoint. Even if you reload the page, the breakpoint will remain. <img class="center" src="/images/chrome_debugger/setting-the-breakpoint.png" width="176" height="111"></li>
<li>The script will now pause when it hits the breakpoint - you now see a red mark. <img class="center" src="/images/chrome_debugger/breaked.png" width="290" height="97"></li>
<li>Right-click on <code>value</code>, and select "Add to Watch" <img class="center" src="/images/chrome_debugger/add-to-watch.png" width="432" height="187"></li>
<li>Over on the right in Watch Expressions, you now see <code>value</code>. And you can clearly see the carriage return symbol that's part of <code>value</code>. <img class="center" src="/images/chrome_debugger/watch-panel.png" width="270" height="287"></li>
</ul>


<p>And we've found our problem. But that's not all! While we're here, let's just make sure our <code>switch</code> statement works, given the right input. We can change what's inside <code>value</code> without reloading the script.</p>

<ul>
<li>Right-click on <code>value</code> and select "Evaluate in Console". <img class="center" src="/images/chrome_debugger/evaluate-in-console.png" width="372" height="175"> A console should open <img class="center" src="/images/chrome_debugger/console.png" width="441" height="167"></li>
<li>Inside the console type <code>value='hang'</code>. Then, start the script running again by click on the Play button over on the right. <img class="center" src="/images/chrome_debugger/play-button.png" width="169" height="122"> You should now see "Hang in there!" on the page, and the script will pause again at the breakpoint. This time, put <code>value='up'</code> and click the Play button again.
<img class="center" src="/images/chrome_debugger/modify-value.png" width="302" height="147"></li>
</ul>


<p>This only scratches the surface of what you can do in the debugger - click around the panels on the right. Hopefully this will help you get started using it.</p>

<!--
---
Firefox users: You can watch, but one bug in FF: it doesn't show the '\n' in `value` when 'Watch'ing it. I've reported that. 

Safari users: You can set breakpoints, I couldn't fine 'Watch' ability, but you can set breakpoints, and play with `value` via the console that shows up.
-->

]]></content>
  </entry>
  
</feed>
